name: "Manage Stale Issues, PRs & Unmerged Branches"
 
on:
  schedule:
    - cron: '30 1 * * *'  # Runs daily at 1:30 AM UTC
  workflow_dispatch:  # Allows manual triggering
 
permissions:
  contents: write
  issues: write
  pull-requests: write
 
jobs:
  stale:
    runs-on: ubuntu-latest
    steps:
      - name: Mark Stale Issues and PRs
        uses: actions/stale@v9
        with:
          stale-issue-message: "This issue is stale because it has been open 180 days with no activity. Remove stale label or comment, or it will be closed in 30 days."
          stale-pr-message: "This PR is stale because it has been open 180 days with no activity. Please update or it will be closed in 30 days."
          days-before-stale: 180
          days-before-close: 30
          exempt-issue-labels: "keep"
          exempt-pr-labels: "keep"
 
  cleanup-branches:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for accurate branch checks
 
      - name: Fetch All Branches
        run: git fetch --all --prune
 
      - name: List Merged Branches With No Activity in Last 5 Days
        run: |
          echo "Branch Name,Last Commit Date,Committer,Committed in Branch,Action" > merged_branches_report.csv
          for branch in $(git for-each-ref --format '%(refname:short) %(committerdate:unix)' refs/remotes/origin | awk -v date=$(date -d '5 days ago' +%s) '$2 < date {print $1}'); do
            if [[ "$branch" != "origin/main" && "$branch" != "origin/dev" ]]; then
              branch_name=${branch#origin/}
              git fetch origin "$branch_name" || echo "Could not fetch branch: $branch_name"
              last_commit_date=$(git log -1 --format=%cd --date=local "origin/$branch_name" || echo "Unknown")
              committer_name=$(git log -1 --format=%cn "origin/$branch_name" || echo "Unknown")
              committed_in_branch=$(git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/remotes/origin | head -n 1 || echo "Unknown")

              echo "$branch_name,$last_commit_date,$committer_name,$committed_in_branch,Delete" >> merged_branches_report.csv
            fi
          done
 
      - name: List PR Approved and Merged Branches Older Than 5 Days
        run: |
          echo "Branch Name,Last Commit Date,Committer,Committed in Branch,Action" > pr_approved_merged_branches.csv
          for branch in $(gh api repos/${{ github.repository }}/pulls --jq '.[] | select(.merged_at != null and (.base.ref == "main" or .base.ref == "dev")) | select(.merged_at | fromdateiso8601 < (now - 432000)) | .head.ref'); do
            git fetch origin "$branch" || echo "Could not fetch branch: $branch"
            last_commit_date=$(git log -1 --format=%cd --date=local origin/$branch || echo "Unknown")
            committer_name=$(git log -1 --format=%cn origin/$branch || echo "Unknown")
            committed_in_branch=$(git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/remotes/origin | head -n 1 || echo "Unknown")

            echo "$branch,$last_commit_date,$committer_name,$committed_in_branch,Delete" >> pr_approved_merged_branches.csv
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 
      - name: List Open PR Branches With No Activity in Last 5 Days
        run: |
          echo "Branch Name,Last Commit Date,Committer,Committed in Branch,Action" > open_pr_inactive_branches.csv
          for branch in $(gh api repos/${{ github.repository }}/pulls --state open --jq '.[] | select(.base.ref == "main" or .base.ref == "dev") | .head.ref'); do
            git fetch origin "$branch" || echo "Could not fetch branch: $branch"
            last_commit_date=$(git log -1 --format=%cd --date=local origin/$branch || echo "Unknown")
            committer_name=$(git log -1 --format=%cn origin/$branch || echo "Unknown")
            committed_in_branch=$(git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/remotes/origin | head -n 1 || echo "Unknown")

            if [[ $(date -d "$last_commit_date" +%s) -lt $(date -d '5 days ago' +%s) ]]; then
              echo "$branch,$last_commit_date,$committer_name,$committed_in_branch,Delete" >> open_pr_inactive_branches.csv
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 
      - name: Install Python Dependencies
        run: pip install pandas openpyxl

      - name: Merge Reports into Single Excel File
        run: |
          python - <<EOF
          import pandas as pd
          
          # Read CSV files into dataframes
          df_merged_branches = pd.read_csv("merged_branches_report.csv")
          df_pr_merged = pd.read_csv("pr_approved_merged_branches.csv")
          df_open_pr = pd.read_csv("open_pr_inactive_branches.csv")

          # Ensure all sheets have the new column "Committed in Branch"
          df_merged_branches["Committed in Branch"] = df_merged_branches["Committed in Branch"].fillna("Unknown")
          df_pr_merged["Committed in Branch"] = df_pr_merged["Committed in Branch"].fillna("Unknown")
          df_open_pr["Committed in Branch"] = df_open_pr["Committed in Branch"].fillna("Unknown")

          # Create a single Excel file with multiple sheets
          excel_file = "stale_branches_report.xlsx"
          with pd.ExcelWriter(excel_file, engine='openpyxl') as writer:
              df_merged_branches.to_excel(writer, sheet_name="Merged Branches", index=False)
              df_pr_merged.to_excel(writer, sheet_name="PR Approved Merged", index=False)
              df_open_pr.to_excel(writer, sheet_name="Open PR Inactive", index=False)
          print(f"Generated report: {excel_file}")
          EOF
          
      - name: Upload Consolidated Excel Report
        uses: actions/upload-artifact@v4
        with:
          name: stale-branches-report
          path: stale_branches_report.xlsx
          retention-days: 30
