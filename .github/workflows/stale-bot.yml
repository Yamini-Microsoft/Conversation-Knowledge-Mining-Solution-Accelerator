name: "Manage Stale Issues, PRs & Unmerged Branches"
 
on:
  schedule:
    - cron: '30 1 * * *'  # Runs daily at 1:30 AM UTC
  workflow_dispatch:  # Allows manual triggering
 
permissions:
  contents: write
  issues: write
  pull-requests: write
 
jobs:
  stale:
    runs-on: ubuntu-latest
    steps:
      - name: Mark Stale Issues and PRs
        uses: actions/stale@v9
        with:
          stale-issue-message: "This issue is stale because it has been open 180 days with no activity. Remove stale label or comment, or it will be closed in 30 days."
          stale-pr-message: "This PR is stale because it has been open 180 days with no activity. Please update or it will be closed in 30 days."
          days-before-stale: 180
          days-before-close: 30
          exempt-issue-labels: "keep"
          exempt-pr-labels: "keep"
 
  cleanup-branches:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for accurate branch checks
 
      - name: Fetch All Branches
        run: git fetch --all --prune

      - name: Install Python Dependencies
        run: pip install pandas openpyxl gh
 
      - name: Generate Excel Report for Stale Branches
        run: |
          import os
          import subprocess
          import pandas as pd
          from datetime import datetime, timedelta

          # Function to fetch branch details
          def get_branch_details(branch):
              try:
                  last_commit_date = subprocess.check_output(f"git log -1 --format='%cd' --date=local origin/{branch}", shell=True, text=True).strip()
                  committer_name = subprocess.check_output(f"git log -1 --format='%cn' origin/{branch}", shell=True, text=True).strip()
                  committed_in_branch = subprocess.check_output(f"git branch -r --contains origin/{branch} | tr -d ' ' | paste -sd ',' -", shell=True, text=True).strip()
                  return [branch, last_commit_date, committer_name, committed_in_branch, "Delete"]
              except:
                  return [branch, "Unknown", "Unknown", "Unknown", "Delete"]

          stale_merged_branches = []
          stale_merged_pr_branches = []
          stale_open_pr_branches = []

          # Get current timestamp
          current_time = datetime.now()
          five_days_ago = current_time - timedelta(days=5)

          # List merged branches with no activity in the last 5 days
          merged_branches = subprocess.check_output("git for-each-ref --format '%(refname:short) %(committerdate:unix)' refs/remotes/origin", shell=True, text=True)
          for line in merged_branches.splitlines():
              branch, commit_timestamp = line.rsplit(" ", 1)
              commit_time = datetime.fromtimestamp(int(commit_timestamp))
              if commit_time < five_days_ago and branch not in ["origin/main", "origin/dev"]:
                  stale_merged_branches.append(get_branch_details(branch.replace("origin/", "")))

          # List PR approved and merged branches older than 5 days
          merged_pr_branches = subprocess.check_output(f'gh api repos/${{ github.repository }}/pulls --jq \'.[] | select(.merged_at != null and (.base.ref == "main" or .base.ref == "dev")) | select(.merged_at | fromdateiso8601 < (now - 432000)) | .head.ref\'', shell=True, text=True)
          for branch in merged_pr_branches.splitlines():
              stale_merged_pr_branches.append(get_branch_details(branch))

          # List open PR branches with no activity in last 5 days
          open_pr_branches = subprocess.check_output(f'gh api repos/${{ github.repository }}/pulls --state open --jq \'.[] | select(.base.ref == "main" or .base.ref == "dev") | .head.ref\'', shell=True, text=True)
          for branch in open_pr_branches.splitlines():
              last_commit_date = subprocess.check_output(f"git log -1 --format='%cd' --date=local origin/{branch}", shell=True, text=True).strip()
              commit_time = datetime.strptime(last_commit_date, "%a %b %d %H:%M:%S %Y")
              if commit_time < five_days_ago:
                  stale_open_pr_branches.append(get_branch_details(branch))

          # Create DataFrames
          df_merged_branches = pd.DataFrame(stale_merged_branches, columns=["Branch Name", "Last Commit Date", "Committer", "Committed In Branch", "Action"])
          df_merged_pr_branches = pd.DataFrame(stale_merged_pr_branches, columns=["Branch Name", "Last Commit Date", "Committer", "Committed In Branch", "Action"])
          df_open_pr_branches = pd.DataFrame(stale_open_pr_branches, columns=["Branch Name", "Last Commit Date", "Committer", "Committed In Branch", "Action"])

          # Save to Excel
          with pd.ExcelWriter("merged_branches_report.xlsx") as writer:
              df_merged_branches.to_excel(writer, sheet_name="Merged Inactive Branches", index=False)
              df_merged_pr_branches.to_excel(writer, sheet_name="Merged PRs Older Than 5 Days", index=False)
              df_open_pr_branches.to_excel(writer, sheet_name="Open PRs Inactive 5+ Days", index=False)

        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Excel Report
        uses: actions/upload-artifact@v4
        with:
          name: merged-branches-report
          path: merged_branches_report.xlsx
          retention-days: 30
