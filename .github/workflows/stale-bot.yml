name: "Manage Stale Issues, PRs & Unmerged Branches"

on:
  schedule:
    - cron: '30 1 * * *'  # Runs daily at 1:30 AM UTC
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  stale:
    runs-on: ubuntu-latest
    steps:
      - name: Mark Stale Issues and PRs
        uses: actions/stale@v9
        with:
          stale-issue-message: "This issue is stale because it has been open 180 days with no activity. Remove stale label or comment, or it will be closed in 30 days."
          stale-pr-message: "This PR is stale because it has been open 180 days with no activity. Please update or it will be closed in 30 days."
          days-before-stale: 30  # Changed from 5 to 30 days
          days-before-close: 60  # Extended close time to 60 days
          exempt-issue-labels: "keep"
          exempt-pr-labels: "keep"

  cleanup-branches:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for accurate branch checks

      - name: Fetch All Branches
        run: git fetch --all --prune

      - name: List Merged Branches With No Activity in Last 3 Months
        run: |
          echo "branch_name,last_commit_date" > inactive_branches.csv  # CSV Header
          echo "Checking merged branches with no activity in the last 3 months..."
          
          for branch_info in $(git for-each-ref --format '%(refname:short) %(committerdate:unix)' refs/remotes/origin | awk -v date=$(date -d '3 months ago' +%s) '$2 < date {print $1","$2}'); do
            branch_name=$(echo "$branch_info" | cut -d',' -f1)
            last_commit_date=$(echo "$branch_info" | cut -d',' -f2)

            if [[ "$branch_name" != "origin/main" && "$branch_name" != "origin/dev" ]]; then
              branch_name_cleaned=${branch_name#origin/}
              formatted_date=$(date -d "@$last_commit_date" +'%Y-%m-%d %H:%M:%S')
              echo "$branch_name_cleaned,$formatted_date" >> inactive_branches.csv
              echo "Listed inactive branch: $branch_name_cleaned (Last commit: $formatted_date)"
            fi
          done

          echo "Inactive branches have been listed in inactive_branches.csv"

      - name: List PR Approved and Merged Branches Older Than 30 Days
        run: |
          echo "branch_name,merged_at" > merged_pr_branches.csv  # CSV Header
          echo "Checking branches with PRs approved and merged into main or dev for 30+ days..."
          
          for branch_info in $(gh api repos/${{ github.repository }}/pulls --jq '.[] | select(.merged_at != null and (.base.ref == "main" or .base.ref == "dev")) | select(.merged_at | fromdateiso8601 < (now - 2592000)) | "\(.head.ref),\(.merged_at)"'); do
            branch_name=$(echo "$branch_info" | cut -d',' -f1)
            merged_at=$(echo "$branch_info" | cut -d',' -f2)
            
            echo "$branch_name,$merged_at" >> merged_pr_branches.csv
            echo "Listed merged PR branch: $branch_name (Merged at: $merged_at)"
          done
          
          echo "Merged PR branches have been listed in merged_pr_branches.csv"

        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
