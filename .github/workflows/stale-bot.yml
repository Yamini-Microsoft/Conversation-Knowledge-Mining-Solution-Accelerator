name: "Manage Stale Issues, PRs & Unmerged Branches"

on:
  schedule:
    - cron: '30 1 * * *'  # Runs daily at 1:30 AM UTC
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  stale:
    runs-on: ubuntu-latest
    steps:
      - name: Mark Stale Issues and PRs
        uses: actions/stale@v9
        with:
          stale-issue-message: "This issue is stale because it has been open 180 days with no activity. Remove stale label or comment, or it will be closed in 30 days."
          stale-pr-message: "This PR is stale because it has been open 180 days with no activity. Please update or it will be closed in 30 days."
          days-before-stale: 180
          days-before-close: 30
          exempt-issue-labels: "keep"
          exempt-pr-labels: "keep"

  cleanup-branches:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for accurate branch checks

      - name: Fetch All Branches
        run: git fetch --all --prune

      - name: List Merged Branches With No Activity in Last 5 Days
        run: |
          echo "Branch Name,Last Commit Date,Committer,Committed In Branch,Action" > merged_branches.csv
          for branch in $(git for-each-ref --format '%(refname:short) %(committerdate:unix)' refs/remotes/origin | awk -v date=$(date -d '5 days ago' +%s) '$2 < date {print $1}'); do
            if [[ "$branch" != "origin/main" && "$branch" != "origin/dev" ]]; then
              branch_name=${branch#origin/}
              git fetch origin "$branch_name" || echo "Could not fetch branch: $branch_name"
              last_commit_date=$(git log -1 --format=%cd --date=local "origin/$branch_name" || echo "Unknown")
              committer_name=$(git log -1 --format=%cn "origin/$branch_name" || echo "Unknown")
              committed_in_branch=$(git branch -r --contains "origin/$branch_name" | tr -d ' ' | paste -sd "," -)
              echo "$branch_name,$last_commit_date,$committer_name,$committed_in_branch,Delete" >> merged_branches.csv
            fi
          done

      - name: List PR Approved and Merged Branches Older Than 5 Days
        run: |
          echo "Branch Name,Last Commit Date,Committer,Committed In Branch,Action" > pr_approved_merged.csv
          for branch in $(gh api repos/${{ github.repository }}/pulls --jq '.[] | select(.merged_at != null and (.base.ref == "main" or .base.ref == "dev")) | select(.merged_at | fromdateiso8601 < (now - 432000)) | .head.ref'); do
            git fetch origin "$branch" || echo "Could not fetch branch: $branch"
            last_commit_date=$(git log -1 --format=%cd --date=local origin/$branch || echo "Unknown")
            committer_name=$(git log -1 --format=%cn origin/$branch || echo "Unknown")
            committed_in_branch=$(git branch -r --contains "origin/$branch" | tr -d ' ' | paste -sd "," -)
            echo "$branch,$last_commit_date,$committer_name,$committed_in_branch,Delete" >> pr_approved_merged.csv
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List Open PR Branches With No Activity in Last 5 Days
        run: |
          echo "Branch Name,Last Commit Date,Committer,Committed In Branch,Action" > open_prs_inactive.csv
          for branch in $(gh api repos/${{ github.repository }}/pulls --state open --jq '.[] | select(.base.ref == "main" or .base.ref == "dev") | .head.ref'); do
            git fetch origin "$branch" || echo "Could not fetch branch: $branch"
            last_commit_date=$(git log -1 --format=%cd --date=local origin/$branch || echo "Unknown")
            committer_name=$(git log -1 --format=%cn origin/$branch || echo "Unknown")
            if [[ $(date -d "$last_commit_date" +%s) -lt $(date -d '5 days ago' +%s) ]]; then
              committed_in_branch=$(git branch -r --contains "origin/$branch" | tr -d ' ' | paste -sd "," -)
              echo "$branch,$last_commit_date,$committer_name,$committed_in_branch,Delete" >> open_prs_inactive.csv
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Python Dependencies
        run: pip install pandas openpyxl

      - name: Generate Excel Report
        run: |
          python - <<EOF
          import pandas as pd

          # Define the CSV files
          files = {
              "Merged Branches": "merged_branches.csv",
              "PR Approved & Merged": "pr_approved_merged.csv",
              "Open PRs Inactive": "open_prs_inactive.csv"
          }

          # Create an Excel writer
          output_file = "Inactive_Branches_Report.xlsx"

          with pd.ExcelWriter(output_file, engine="openpyxl") as writer:
              for sheet_name, file_name in files.items():
                  try:
                      print(f"Processing file: {file_name}")

                      # debugging : print the first 10 lines of the file
                      with open(file_name, "r") as f:
                          print(f"Contents of {file_name} (first 10 lines):")
                          print("".join(f.readlines()[:10]))
                      # read csv with error handling
                      df = pd.read_csv(file_name, sep=None, engine="python", on_bad_lines="skip")
                      # save to Excel
                      df.to_excel(writer, sheet_name=sheet_name, index=False)
                      print(f"Added {sheet_name} to {output_file}")
                  except FileNotFoundError:
                      print(f"File {file_name} not found, skipping...")
                  except Exception as e:
                      print(f"Error processing {file_name}: {e}")

          print(f"Excel file '{output_file}' created successfully!")
          EOF

      - name: Upload Excel Report
        uses: actions/upload-artifact@v4
        with:
          name: inactive-branches-report
          path: Inactive_Branches_Report.xlsx
          retention-days: 30
