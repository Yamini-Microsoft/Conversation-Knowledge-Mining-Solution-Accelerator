name: "Manage Stale Issues, PRs & Unmerged Branches"

on:
  schedule:
    - cron: '30 1 * * *'  # Runs daily at 1:30 AM UTC
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  stale:
    runs-on: ubuntu-latest
    steps:
      - name: Mark Stale Issues and PRs
        uses: actions/stale@v9
        with:
          stale-issue-message: "This issue is stale because it has been open 180 days with no activity. Remove stale label or comment, or it will be closed in 30 days."
          stale-pr-message: "This PR is stale because it has been open 180 days with no activity. Please update or it will be closed in 30 days."
          days-before-stale: 180
          days-before-close: 30
          exempt-issue-labels: "keep"
          exempt-pr-labels: "keep"

  cleanup-branches:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for accurate branch checks

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install python3-pip -y
          pip install pandas openpyxl gh

      - name: Fetch All Branches
        run: git fetch --all --prune

      - name: Generate Branch Cleanup Report
        run: |
          python3 <<EOF
          import os
          import subprocess
          import pandas as pd
          from datetime import datetime, timedelta

          repo = "${{ github.repository }}"
          token = "${{ secrets.GITHUB_TOKEN }}"
          old_date = datetime.now() - timedelta(days=5)

          def run_cmd(cmd):
              return subprocess.check_output(cmd, shell=True, text=True).strip().split("\n")

          # Lists for Excel Sheets
          merged_branches = []
          pr_approved_branches = []
          open_pr_branches = []

          # List Merged Branches With No Activity in Last 5 Days
          for branch in run_cmd("git for-each-ref --format '%(refname:short) %(committerdate:unix)' refs/remotes/origin"):
              if not branch.strip():
                  continue
              branch_name, timestamp = branch.split()
              if int(timestamp) < old_date.timestamp() and branch_name not in ["origin/main", "origin/dev"]:
                  branch_name = branch_name.replace("origin/", "")
                  last_commit = run_cmd(f"git log -1 --format='%cd' --date=local origin/{branch_name}")[0]
                  committer = run_cmd(f"git log -1 --format='%cn' origin/{branch_name}")[0]
                  merged_branches.append([branch_name, last_commit, committer, "Delete"])

          # List PR Approved and Merged Branches Older Than 5 Days
          pr_branches = run_cmd(f"gh api repos/{repo}/pulls --jq "".[] | select(.merged_at != null and (.base.ref == \"main\" or .base.ref == \"dev\")) | select(.merged_at | fromdateiso8601 < (now - 432000)) | .head.ref"")
          for branch in pr_branches:
              last_commit = run_cmd(f"git log -1 --format='%cd' --date=local origin/{branch}")[0]
              committer = run_cmd(f"git log -1 --format='%cn' origin/{branch}")[0]
              pr_approved_branches.append([branch, last_commit, committer, "Delete"])

          # List Open PR Branches With No Activity in Last 5 Days
          open_branches = run_cmd(f"gh api repos/{repo}/pulls --state open --jq "".[] | select(.base.ref == \"main\" or .base.ref == \"dev\") | .head.ref"")
          for branch in open_branches:
              last_commit = run_cmd(f"git log -1 --format='%cd' --date=local origin/{branch}")[0]
              committer = run_cmd(f"git log -1 --format='%cn' origin/{branch}")[0]
              if datetime.strptime(last_commit, "%a %b %d %H:%M:%S %Y") < old_date:
                  open_pr_branches.append([branch, last_commit, committer, "Delete"])

          # Create DataFrames for Excel
          with pd.ExcelWriter("inactive_branches_report.xlsx") as writer:
              pd.DataFrame(merged_branches, columns=["Branch Name", "Last Commit Date", "Committer", "Action"]).to_excel(writer, sheet_name="Merged Branches", index=False)
              pd.DataFrame(pr_approved_branches, columns=["Branch Name", "Last Commit Date", "Committer", "Action"]).to_excel(writer, sheet_name="Merged PR Branches", index=False)
              pd.DataFrame(open_pr_branches, columns=["Branch Name", "Last Commit Date", "Committer", "Action"]).to_excel(writer, sheet_name="Open PR Branches", index=False)

          EOF

      - name: Upload Excel Report
        uses: actions/upload-artifact@v4
        with:
          name: inactive-branches-report
          path: inactive_branches_report.xlsx
          retention-days: 30
