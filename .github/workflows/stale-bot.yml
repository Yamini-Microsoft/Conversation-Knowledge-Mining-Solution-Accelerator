name: "Manage Stale Issues, PRs & Unmerged Branches"
 
on:
  schedule:
    - cron: '30 1 * * *'  # Runs daily at 1:30 AM UTC
  workflow_dispatch:  # Allows manual triggering
 
permissions:
  contents: write
  issues: write
  pull-requests: write
 
jobs:
  cleanup-branches:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for accurate branch checks
 
      - name: Install Python and Pandas
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip
          pip install pandas openpyxl
 
      - name: Fetch All Branches
        run: git fetch --all --prune

      - name: Generate Branch Cleanup Report
        run: |
          python3 <<EOF
          import os
          import subprocess
          import pandas as pd
          from datetime import datetime, timedelta

          def get_branch_data(command):
              try:
                  result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
                  branches = result.stdout.strip().split("\n")
                  return [b for b in branches if b]
              except subprocess.CalledProcessError:
                  return []

          # Define output file
          output_file = "branch_cleanup_report.xlsx"

          # Initialize empty dataframes
          merged_branches_data = []
          pr_approved_merged_data = []
          open_pr_inactive_data = []

          # Get current date - 5 days ago
          five_days_ago = (datetime.now() - timedelta(days=5)).timestamp()

          # Merged Branches With No Activity in Last 5 Days
          merged_branches = get_branch_data("git for-each-ref --format '%(refname:short) %(committerdate:unix)' refs/remotes/origin | awk -v date=$(date -d '5 days ago' +%s) '$2 < date {print $1}'")
          for branch in merged_branches:
              if branch not in ["origin/main", "origin/dev"]:
                  branch_name = branch.replace("origin/", "")
                  last_commit_date = subprocess.getoutput(f"git log -1 --format=%cd --date=local origin/{branch_name}")
                  committer_name = subprocess.getoutput(f"git log -1 --format=%cn origin/{branch_name}")
                  merged_branches_data.append([branch_name, last_commit_date, committer_name, "Delete"])

          # PR Approved and Merged Branches Older Than 5 Days
          pr_approved_merged_branches = get_branch_data("gh api repos/${{ github.repository }}/pulls --jq '.[] | select(.merged_at != null and (.base.ref == \"main\" or .base.ref == \"dev\")) | select(.merged_at | fromdateiso8601 < (now - 432000)) | .head.ref'")
          for branch in pr_approved_merged_branches:
              last_commit_date = subprocess.getoutput(f"git log -1 --format=%cd --date=local origin/{branch}")
              committer_name = subprocess.getoutput(f"git log -1 --format=%cn origin/{branch}")
              pr_approved_merged_data.append([branch, last_commit_date, committer_name, "Delete"])

          # Open PR Branches With No Activity in Last 5 Days
          open_pr_branches = get_branch_data("gh api repos/${{ github.repository }}/pulls --state open --jq '.[] | select(.base.ref == \"main\" or .base.ref == \"dev\") | .head.ref'")
          for branch in open_pr_branches:
              last_commit_date = subprocess.getoutput(f"git log -1 --format=%cd --date=local origin/{branch}")
              committer_name = subprocess.getoutput(f"git log -1 --format=%cn origin/{branch}")
              if datetime.strptime(last_commit_date, "%c").timestamp() < five_days_ago:
                  open_pr_inactive_data.append([branch, last_commit_date, committer_name, "Delete"])

          # Create DataFrames
          df_merged = pd.DataFrame(merged_branches_data, columns=["Branch Name", "Last Commit Date", "Committer", "Action"])
          df_pr_approved = pd.DataFrame(pr_approved_merged_data, columns=["Branch Name", "Last Commit Date", "Committer", "Action"])
          df_open_pr = pd.DataFrame(open_pr_inactive_data, columns=["Branch Name", "Last Commit Date", "Committer", "Action"])

          # Write to Excel
          with pd.ExcelWriter(output_file, engine="openpyxl") as writer:
              df_merged.to_excel(writer, sheet_name="MergedBranches", index=False)
              df_pr_approved.to_excel(writer, sheet_name="PRApprovedMergedBranches", index=False)
              df_open_pr.to_excel(writer, sheet_name="OpenPRInactiveBranches", index=False)

          print(f"Report saved to {output_file}")
          EOF
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Branch Cleanup Report
        uses: actions/upload-artifact@v4
        with:
          name: branch-cleanup-report
          path: branch_cleanup_report.xlsx
          retention-days: 30
