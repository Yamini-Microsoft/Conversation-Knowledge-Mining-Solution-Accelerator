name: "Manage Stale Issues, PRs & Unmerged Branches"

on:
  schedule:
    - cron: '30 1 * * *'  # Runs daily at 1:30 AM UTC
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  stale:
    runs-on: ubuntu-latest
    steps:
      - name: Mark Stale Issues and PRs
        uses: actions/stale@v9
        with:
          stale-issue-message: "This issue is stale because it has been open 180 days with no activity. Remove stale label or comment, or it will be closed in 30 days."
          stale-pr-message: "This PR is stale because it has been open 180 days with no activity. Please update or it will be closed in 30 days."
          days-before-stale: 180
          days-before-close: 30
          exempt-issue-labels: "keep"
          exempt-pr-labels: "keep"

  cleanup-branches:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for accurate branch checks

      - name: Fetch All Branches
        run: git fetch --all --prune

      - name: Delete Merged Branches With No Activity in Last 3 Months
        run: |
          echo "Checking merged branches with no activity in the last 3 months..."
          for branch in $(git for-each-ref --format '%(refname:short) %(committerdate:unix)' refs/remotes/origin | awk -v date=$(date -d '3 months ago' +%s) '$2 < date {print $1}'); do
            if [[ "$branch" != "origin/main" && "$branch" != "origin/dev" ]]; then
              branch_name=${branch#origin/}
              echo "Deleting inactive merged branch: $branch_name"
              git push origin --delete "$branch_name"
            fi
          done

      - name: Delete PR Approved and Merged Branches Older Than 30 Days
        run: |
          echo "Checking branches with PRs approved and merged into main or dev for 30+ days..."
          for branch in $(gh api repos/${{ github.repository }}/pulls --jq '.[] | select(.merged_at != null and (.base.ref == "main" or .base.ref == "dev")) | select(.merged_at | fromdateiso8601 < (now - 2592000)) | .head.ref'); do
            echo "Deleting merged PR branch: $branch"
            git push origin --delete "$branch"
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
